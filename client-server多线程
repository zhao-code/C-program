#include<stdio.h>
#include<stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <sys/un.h>
#include <fcntl.h>
#include <errno.h>

#define MAXSTR 65535
#define READ 1
#define WRITE 2
#define RECV_SOCK 0
#define SEND_SOCK 1
#define QUEUE_PATH "/root/socket_queue"
#define SUN_LEN(ptr) ((size_t) (((struct sockaddr_un *) 0)->sun_path) + strlen ((ptr)->sun_path))

//要发送的消息
char *msg = NULL;
//存储套接字描述符
int socket_array[3] = {0};

/* 设置sock属性 */
int CT_SetSocketSize(int sock, int mode, int max_msg_size);

/* 绑定套接字 */
int Creat_Read_Socket(char *path);

/* 连接套接字 */
int Creat_Write_Socket(char *path);

/* 发送消息线程 */
void *Sending_Msg_Thread(void *data);

/* 接收消息线程 */
void *Receive_Msg_Thread(void *data);

int CT_SetSocketSize(int sock, int mode, int max_msg_size) {

    int len;
    socklen_t optlen = sizeof(len);

    if (mode == RECV_SOCK) {
        if (getsockopt(sock, SOL_SOCKET, SO_RCVBUF, (void *)&len, &optlen) == -1) {
            return -1;
        }
        //printf("bind:%d\n", len);
        if (len < max_msg_size) {
            len = max_msg_size;
            if (setsockopt(sock, SOL_SOCKET, SO_RCVBUF, (const void *)&len, optlen) < 0) {
                return -1;
            }
        }
    } else if (mode == SEND_SOCK) {
        if (getsockopt(sock, SOL_SOCKET, SO_SNDBUF, (void *)&len, &optlen) == -1) {
            return -1;
        }
        //printf("con:%d\n", len);
        if (len < max_msg_size) {
            len = max_msg_size;
            if (setsockopt(sock, SOL_SOCKET, SO_SNDBUF, (const void *)&len, optlen) < 0) {
                return -1;
            }
        }
    }
    return 0;
}


int Creat_Read_Socket(char *path)
{
	struct sockaddr_un n_us;
	int sock_fd = 0;
	memset(&n_us, 0 ,sizeof(n_us));
	n_us.sun_family = AF_UNIX;
	strncpy(n_us.sun_path, path, sizeof(n_us.sun_path) - 1);
	int type;
	
	if ((sock_fd = socket(PF_UNIX, SOCK_DGRAM, 0)) < 0) {
		return (-1);
	}

	if (bind(sock_fd, (struct sockaddr *)&n_us, SUN_LEN(&n_us)) < 0) {
		close(sock_fd);
		return (-1);
	}
	if (chmod(path, 0660) < 0) {
		close(sock_fd);
		return (-1);
	}

	if (type == SOCK_STREAM && listen(sock_fd, 128) < 0) {
		close(sock_fd);
		return (-1);
	}

	if (CT_SetSocketSize(sock_fd, RECV_SOCK, MAXSTR + 512) < 0) {
		close(sock_fd);
		return (-1);
	}

	if (fcntl(sock_fd, F_SETFD, FD_CLOEXEC) == -1) {
		printf("Cannot set close-on-exec flag to socket: %s (%d)", strerror(errno), errno);
	}
	
	return sock_fd;
	
}

int Creat_Write_Socket(char *path)
{

	struct sockaddr_un n_us;
	int sock_fd = 0;
	memset(&n_us, 0, sizeof(n_us));
	n_us.sun_family = AF_UNIX;

	strncpy(n_us.sun_path, path, sizeof(n_us.sun_path) - 1);

	if ((sock_fd = socket(PF_UNIX, SOCK_DGRAM, 0)) < 0) {
		return (-1);
	}

	if (connect(sock_fd, (struct sockaddr *)&n_us, SUN_LEN(&n_us)) < 0) {
		close(sock_fd);
		return (-1);
	}

	if (CT_SetSocketSize(sock_fd, SEND_SOCK, MAXSTR + 256) < 0) {
		close(sock_fd);
		return (-1);
	}
	if (fcntl(sock_fd, F_SETFD, FD_CLOEXEC) == -1) {
		printf("Cannot set close-on-exec flag to socket: %s (%d)", strerror(errno), errno);
	}

	return (sock_fd);
	int flags = fcntl(sock_fd, F_GETFD);
	if (flags == -1)
		flags = 0;
	flags |= FD_CLOEXEC;
	fcntl(sock_fd, F_SETFD, flags);
	return sock_fd;
}

void *Sending_Msg_Thread(void *data) {
	int size = 0;
	size = strlen(msg) + 1;
	
	while(1){
		if (send(socket_array[1], msg, size, 0) < size) {
			if (errno == 0) {
				printf("send error:%d \n", errno);
			}
			printf("sending error\n");
		}
	}
}

void *Receive_Msg_Thread(void *data){

	struct sockaddr_un n_us;
	socklen_t us_l = sizeof(n_us);
	ssize_t recvd;
	char ret[MAXSTR+1] = "0";
	int num = 0;
	while(1){
		if ((recvd = recvfrom(socket_array[0], ret, MAXSTR - 1, 0, (struct sockaddr *)&n_us, &us_l)) < 0) {
			printf("recv size less 0\n");
		}
		ret[recvd] = '\0';
		num++;
		if(num%10000 == 0)
			printf("%d\n", num);
			//printf("%d:%s\n", num, ret);
		memset(ret, 0 , MAXSTR+1);
	}
}

int main(int argc, char* argv[])
{
  //套接字接收描述符
	int fd_bind = 0;
	
	//套接字发送描述符
	int fd_connect = 0;
	
	//发送的信息大小若不指定大小，默认为100
	int msg_size = 100;
	if(argv[1])
		msg_size = atoi(argv[1]);
	msg = (char *) malloc(msg_size + 1);
	memset(msg, 0 ,msg_size + 1);
	memset(msg, 'Q' ,msg_size);
	
	//若存在旧套接字，则删除
	unlink(QUEUE_PATH);
	
	//创建读取套接字
	fd_bind = Creat_Read_Socket(QUEUE_PATH);
	if(fd_bind < 0)
		printf("bind socket error\n");
		
	//创建发送套接字
	fd_connect = Creat_Write_Socket(QUEUE_PATH);
	if(fd_connect < 0)
		printf("connect socket error\n");
	
	//套接字描述符存储在全局数组，以备线程使用
	socket_array[0] = fd_bind;
	socket_array[1] = fd_connect;
	
	//创建发送和接收线程
	pthread_t ct1, ct2;
	pthread_create(&ct1,0,Sending_Msg_Thread,NULL);
	pthread_create(&ct2,0,Receive_Msg_Thread,NULL);
	
	//子线程加入主线程
	pthread_join(ct1, NULL);
	pthread_join(ct2, NULL);
	
  return 0;	
}
