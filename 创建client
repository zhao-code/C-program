#include<stdio.h>
#include<stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/tcp.h>
#include <sys/un.h>
#include <fcntl.h>
#include <errno.h>
#include<sys/time.h>

#define MAXSTR 65535
#define READ 1
#define WRITE 2
#define RECV_SOCK 0
#define SEND_SOCK 1
#define QUEUE_PATH "/root/socket_queue"
#define SUN_LEN(ptr) ((size_t) (((struct sockaddr_un *) 0)->sun_path) + strlen ((ptr)->sun_path))

//要发送的消息
char *msg = NULL;


/* 设置sock属性 */
int CT_SetSocketSize(int sock, int mode, int max_msg_size);

/* 绑定套接字 */
int Creat_Read_Socket(char *path);

/* 连接套接字 */
int Creat_Write_Socket(char *path);

/* 发送消息线程 */
void *Sending_Msg_Thread(void *data);

/* 接收消息线程 */
void *Receive_Msg_Thread(void *data);

int CT_SetSocketSize(int sock, int mode, int max_msg_size) {

    int len;
    socklen_t optlen = sizeof(len);

    if (mode == RECV_SOCK) {
        if (getsockopt(sock, SOL_SOCKET, SO_RCVBUF, (void *)&len, &optlen) == -1) {
            return -1;
        }
        printf("bind:%d\n", len);
        if (len < max_msg_size) {
            len = max_msg_size;
            if (setsockopt(sock, SOL_SOCKET, SO_RCVBUF, (const void *)&len, optlen) < 0) {
                return -1;
            }
        }
    } else if (mode == SEND_SOCK) {
        if (getsockopt(sock, SOL_SOCKET, SO_SNDBUF, (void *)&len, &optlen) == -1) {
            return -1;
        }
        printf("con:%d\n", len);
        if (len < max_msg_size) {
            len = max_msg_size;
            if (setsockopt(sock, SOL_SOCKET, SO_SNDBUF, (const void *)&len, optlen) < 0) {
                return -1;
            }
        }
    }
    return 0;
}


int Creat_Write_Socket(char *path)
{

	struct sockaddr_un n_us;
	int sock_fd = 0;
	memset(&n_us, 0, sizeof(n_us));
	n_us.sun_family = AF_UNIX;

	strncpy(n_us.sun_path, path, sizeof(n_us.sun_path) - 1);

	if ((sock_fd = socket(PF_UNIX, SOCK_DGRAM, 0)) < 0) {
		return (-1);
	}

	if (connect(sock_fd, (struct sockaddr *)&n_us, SUN_LEN(&n_us)) < 0) {
		close(sock_fd);
		return (-1);
	}

	if (CT_SetSocketSize(sock_fd, SEND_SOCK, MAXSTR + 256) < 0) {
		close(sock_fd);
		return (-1);
	}
	if (fcntl(sock_fd, F_SETFD, FD_CLOEXEC) == -1) {
		printf("Cannot set close-on-exec flag to socket: %s (%d)", strerror(errno), errno);
	}

	int flags = fcntl(sock_fd, F_GETFD);
	if (flags == -1)
		flags = 0;
	flags |= FD_CLOEXEC;
	fcntl(sock_fd, F_SETFD, flags);
	return sock_fd;
}

int main(int argc, char* argv[])
{
 
	//套接字发送描述符
	int fd_connect = 0;
	
	//发送的信息大小若不指定大小，默认为100
	int msg_size = 100;
	int flag = 0;    //0：发送接收  1:发送   2：接收
	if(argv[1])
		msg_size = atoi(argv[1]);
		
	if(argv[2])
		flag = atoi(argv[2]);

	msg = (char *) malloc(msg_size + 1);
	memset(msg, 0 ,msg_size + 1);
	memset(msg, 'Q' ,msg_size);
	
	//创建发送套接字
	fd_connect = Creat_Write_Socket(QUEUE_PATH);
	if(fd_connect < 0)
		printf("connect socket error\n");


  sleep(3);
	//创建发送和接收线程
	int size = 0;
	int num = 0;
	struct timeval start;
	struct timeval end;
	size = strlen(msg) + 1;
	float timeuse = 0;
	gettimeofday(&start,NULL);
	
  while(1){
		if (send(fd_connect, msg, size, 0) < size) {
			perror("");
		}
		num++;
		if (num == 1000000) {
			gettimeofday(&end, NULL);
			timeuse = 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec - start.tv_usec;
			printf("sending_count:%.3f \n", timeuse/1000000);
			num=10;
			gettimeofday(&start,NULL);
		}
	}
  return 0;
}
